<!DOCTYPE html>
<html>
  <head>
    <title>HELLO</title>
    <style>
      html, body {
        height: 100%;
      }
      h1 {
        height: 70px;
        font-size: 20px;
        margin: 5px 10px;
      }
      .header {
        border-bottom: 1px solid #333;
        height: 5%;
        padding: 10px;
        text-align: center;
      }
      .container {
        display: flex;
        height: 55%;
        justify-content: space-around;
        border-bottom: 1px solid #333;
        padding: 30px 0;
      }
      .container .item {
        flex: 1;
        margin-right: 10px;
      }
      .container .item:last-child {
        margin-right: 0;
      }
      .container .item span {
        font-size: 70px;
        font-weight: bold;
        display: block;
        text-align: center;
      }
      .container .item div {
        height: 200px;
      }
      .footer {
        height: 30%;
        overflow: auto;
      }
    </style>
    <script src="//localhost:5001/socket.io/socket.io.js"></script>
  </head>
  <body>
    <header class="header">
      <h1>TCP DEMO</h1>
    </header>
    <div align="center">
      <h1>client speed</h1>
      1/s <input id="frequency" type="range" min="1" max="100" /> 100/s
    </div>
    <main>
      <div class="container">
        <div class="item">
          <h1>client send request count:</h1>
          <span id="sendRequestNum">0</span>
        </div>
        <div class="item">
          <h1>client padding request count:</h1>
          <span id="paddingRequestNum">0</span>
        </div>
        <div class="item">
          <h1>app total request count</h1>
          <span id="appTotalNum">0</span>
        </div>
        <div class="item">
          <h1>app processed request count</h1>
          <span id="appProcessedNum">0</span>
        </div>
        <div class="item">
          <h1>app remaing request count</h1>
          <span id="appRemaingNum">0</span>
        </div>
      </div>
      <div class="container">
        <div class="item">
          <h1>tcp current connection count</h1>
          <span id="tcpCurrentNum">0</span>
        </div>
        <div class="item">
          <h1>tcp current request rate:</h1>
          <span id="tcpFrequencyNum">0</span>
        </div>
        <div class="item">
          <h1>tcp ongoing request count</h1>
          <span id="tcpOngoingNum">0</span>
        </div>
        <div class="item">
          <h1>tcp processed request count</h1>
          <span id="tcpProcessedNum">0</span>
        </div>
        <div class="item">
          <h1>tcp remaing request count</h1>
          <span id="tcpRemaingNum">0</span>
        </div>
      </div>
    </main>
    <footer class="footer" id="request-result"></footer>
    <script>
      const init = 1;
      const socket5001 = io.connect('localhost:5001');
      const socket4000 = io.connect('localhost:4000');
      const requestResult = document.getElementById('request-result');
      const frequencys = document.getElementById('frequency');
      
      const sendRequestNum = document.getElementById('sendRequestNum');
      const paddingRequestNum = document.getElementById('paddingRequestNum');
      const appTotalNum = document.getElementById('appTotalNum');
      const appProcessedNum = document.getElementById('appProcessedNum');
      const appRemaingNum = document.getElementById('appRemaingNum');
      
      const tcpCurrentNum = document.getElementById('tcpCurrentNum');
      const tcpFrequencyNum = document.getElementById('tcpFrequencyNum');
      const tcpOngoingNum = document.getElementById('tcpOngoingNum');
      const tcpProcessedNum = document.getElementById('tcpProcessedNum');
      const tcpRemaingNum = document.getElementById('tcpRemaingNum');
      let frequencyPeerSecond = Math.round(1000 / init);
      let timer = null;
      let reqnum = 0;
      let donenum = 0;
      
      socket5001.on('message', function(data){
        tcpFrequencyNum.innerHTML = data.currentRequestRate;
        tcpCurrentNum.innerHTML = data.currentConnectionCount;
        tcpOngoingNum.innerHTML = data.ongoingRequestCount;
        tcpProcessedNum.innerHTML = data.processedRequestCount;
        tcpRemaingNum.innerHTML = data.remaingRequestCount;
      });
      
      socket4000.on('message', function(data){
        appTotalNum.innerHTML = data.totalRequestCount;
        appProcessedNum.innerHTML = data.processedRequestCount;
        appRemaingNum.innerHTML = data.remaingRequestCount;
      });
      
      function reqListener () {
        donenum++;
        
        paddingRequestNum.innerHTML = reqnum - donenum;
        
        const span = document.getElementById('p'+this.params.time);
        
        if (span) {
          span.innerHTML = this.responseText;
        }
        
        if (requestResult.childNodes.length > 10) {
          for (let i = 0; i < 2; i++) {
            requestResult.removeChild(requestResult.childNodes[i]);
          }
        }
      }
      
      function sendRequest(time) {
        reqnum++;
        
        sendRequestNum.innerHTML = reqnum;
        
        const oReq = new XMLHttpRequest();
        oReq.addEventListener("load", reqListener);
        oReq.open("GET", "/api/showtime?time=" + time);
        oReq.params = {time};
        oReq.send();
        
        const element = document.createElement('p');
        const text = document.createTextNode(time + ": "); 
        const span = document.createElement('span');
        span.setAttribute('id', 'p'+time);
        element.appendChild(text);
        element.appendChild(span);
        requestResult.appendChild(element);
        requestResult.scrollTop = requestResult.scrollHeight;
      }
      
      function startTimer () {
        timer = setInterval(() => {
          let data = new Date().getTime();
          sendRequest(data);
        }, frequencyPeerSecond);
      }
      
      frequencys.addEventListener('change', function (e) {
        const value = e.target.value / 1;
        frequencyPeerSecond = Math.round(1000 / value);
        clearInterval(timer);
        startTimer();
      });
      
      frequencys.value = init;
      startTimer();
    </script>
  </body>
</html>