{
  "name": "tcp-demo",
  "version": "1.0.0",
  "description": "Take Home Test: Please build a TCP server does the following: Minimum requirement: - TCP server takes in any request text per line and send a query to an external API, until client send 'quit' or timed out. - TCP server can accept multiple connections at the same time. - As for the external API, the choice is yours, or even a mock. - We do have a API request rate limit for the external API: 30 requests per second. - Try not to use 3rd-party libraries unless necessary. - Your code should be runnable and functional in happy cases. Going deeper: - Please consider the external API could be unreachable or unavailable. - Mount a HTTP endpoint on your server and display some statistics: current connection count, current request rate, processed request count, remaing jobs...etc - The rest is for you to show your strength in programming. e.g., tests, documents, user interface, architecture.",
  "main": "index.js",
  "scripts": {
    "start": "npm run start-mock;npm run start-tcp;npm run start-web",
    "start-mock": "node ./mockApiServer/index.js > ./mockApiServer.log 2>&1 &",
    "start-tcp": "node ./tcpServer/index.js > ./tcpServer.log 2>&1 &",
    "start-web": "node ./webServer/index.js > ./webServer.log 2>&1 &",
    "stop": "killall -SIGINT webServer; killall -SIGINT tcpServer; killall -SIGINT mockApiServer",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "rexhome7326 <rexhome7326@gmail.com> (https://github.com/rexhome7326)",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.18.3",
    "cookie-parser": "^1.4.3",
    "ejs": "^2.6.1",
    "express": "^4.16.3",
    "generic-pool": "^3.4.2",
    "socket.io": "^2.1.1"
  }
}
